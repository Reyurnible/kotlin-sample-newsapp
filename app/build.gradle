apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-kapt'

def secretProps = loadSecretProperties()

android {
    compileSdkVersion rootProject.ext.compileSdkVersion
    buildToolsVersion rootProject.ext.buildToolsVersion
    defaultConfig {
        applicationId "com.github.reyurnible.news"
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
        // Loading Api Key from secret.properties
        buildConfigField("String", "API_KEY", "\"${secretProps.getProperty('NEWS_API_KEY')}\"")
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    sourceSets {
        main.java.srcDirs += 'src/main/kotlin'
        test.java.srcDirs += 'src/test/kotlin'
    }
    kapt {
        generateStubs = true
    }
    lintOptions {
        disable 'InvalidPackage'
    }
}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
    // v4
    compile "com.android.support:support-compat:$supportLibVersion"
    compile "com.android.support:support-core-ui:$supportLibVersion"
    compile "com.android.support:support-fragment:$supportLibVersion"
    // v7
    compile "com.android.support:appcompat-v7:$supportLibVersion"
    compile "com.android.support:recyclerview-v7:$supportLibVersion"
    compile "com.android.support:palette-v7:$supportLibVersion"
    // Design
    compile "com.android.support:design:$supportLibVersion"
    // Architecture Components
    compile "android.arch.lifecycle:runtime:$archVersion"
    compile "android.arch.lifecycle:extensions:$archVersion"
    kapt "android.arch.lifecycle:compiler:$archVersion"
    // Kotlin
    compile "org.jetbrains.kotlin:kotlin-stdlib:$kotlinVersion"
    // Kodein
    compile "com.github.salomonbrys.kodein:kodein:$kodeinVersion"
    compile "com.github.salomonbrys.kodein:kodein-android:$kodeinVersion"
    // Anko(View DSL for Kotlin)
    compile "org.jetbrains.anko:anko:$ankoVersion"
    compile "org.jetbrains.anko:anko-commons:$ankoVersion"
    compile "org.jetbrains.anko:anko-support-v4-commons:$ankoVersion"
    compile "org.jetbrains.anko:anko-appcompat-v7-commons:$ankoVersion"
    // Anko Layouts
    compile "org.jetbrains.anko:anko-sdk25:$ankoVersion" // So here it's 15 too
    compile "org.jetbrains.anko:anko-support-v4:$ankoVersion"
    compile "org.jetbrains.anko:anko-appcompat-v7:$ankoVersion"
    compile "org.jetbrains.anko:anko-design:$ankoVersion"
    compile "org.jetbrains.anko:anko-recyclerview-v7:$ankoVersion"
    // Retrofit
    compile "com.squareup.retrofit2:retrofit:$retrofitVersion"
    compile 'com.jakewharton.retrofit:retrofit2-rxjava2-adapter:1.0.0'
    compile "com.squareup.retrofit2:converter-gson:$retrofitVersion"
    compile "com.squareup.okhttp3:okhttp:$okhttpVersion"
    compile "com.squareup.okhttp3:logging-interceptor:$okhttpVersion"
    // Rx
    compile "io.reactivex.rxjava2:rxjava:$rxJavaVersion"
    compile "io.reactivex.rxjava2:rxandroid:$rxAndroidVersion"
    // RxLifecycle
    compile "com.trello.rxlifecycle2:rxlifecycle:$rxLifecycleVersion"
    compile "com.trello.rxlifecycle2:rxlifecycle-android:$rxLifecycleVersion"
    compile "com.trello.rxlifecycle2:rxlifecycle-components:$rxLifecycleVersion"
    compile "com.trello.rxlifecycle2:rxlifecycle-navi:$rxLifecycleVersion"
    compile "com.trello.rxlifecycle2:rxlifecycle-kotlin:$rxLifecycleVersion"
    // Requery
    compile "io.requery:requery:$requeryVersion"
    compile "io.requery:requery-kotlin:$requeryVersion"
    compile "io.requery:requery-android:$requeryVersion"
    kapt "io.requery:requery-processor:$requeryVersion"
    // Picasso
    compile 'com.squareup.picasso:picasso:2.5.2'
    compile 'com.jakewharton.picasso:picasso2-okhttp3-downloader:1.0.2'
    // Test
    testCompile 'junit:junit:4.12'
    testCompile "org.jetbrains.kotlin:kotlin-stdlib:$kotlinVersion"
    testCompile "org.jetbrains.kotlin:kotlin-test-junit:$kotlinVersion"
    testCompile "org.mockito:mockito-core:1.+"
    androidTestCompile('com.android.support.test.espresso:espresso-core:2.2.2', {
        exclude group: 'com.android.support', module: 'support-annotations'
    })
}

def loadSecretProperties() {
    def props = new Properties()
    // If you wanna build release apk, get secret properties
    def secretPropsFile = project.rootProject.file('secret.properties')
    if (secretPropsFile.exists()) {
        props.load(secretPropsFile.newDataInputStream())
    } else {
        // Set Dummy Properties for Build
        // Check your key, or go to https://newsapi.org to create a free API key.
        props['NEWS_API_KEY'] = 'dummy'
    }
    return props
}
